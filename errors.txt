1. Encoding Issue: encode_categorical_columns() is not being used properly
You defined encode_categorical_columns(X), but you never updated X after encoding.


2. LabelEncoder Changes the DataFrame In-Place
Inside encode_categorical_columns(), you're modifying df[col] directly, but X in train() is a different reference.
Instead of modifying df[col], return a new DataFrame and store it in X.


3. train() function is missing type conversion for y_true
y_true is likely not in numeric format (since it was read from CSV).
Convert it to float before using it in calculations:

4. Your Weight (w) is a 1D Array, But X Can Have Multiple Features
If X has multiple features, w = np.zeros(n) is fine, 
but X should be converted to a NumPy array before using np.dot().

5. logistic_regression() Should Return Probability Instead of Just True/False
The function currently returns only True/False values (sigmoid(z) > 0.5).
Instead, return the actual probabilities:
python
Copy
Edit


Whatâ€™s Fixed?
âœ… Properly Encodes Features (Ensures X is properly transformed before training)
âœ… Converts y_true to Numeric (Prevents type errors in NumPy calculations)
âœ… Returns Probability in logistic_regression() (Allows you to interpret confidence of predictions)
âœ… Uses to_numpy() for NumPy Operations (Ensures np.dot() works correctly)
âœ… Improved Weight Update and Loss Calculation

Next Steps
ðŸ”¹ Test with Different Learning Rates (e.g., 0.01, 0.1, 0.001)
ðŸ”¹ Test with More Data Features (Add columns like "Years of Experience")
ðŸ”¹ Implement Train/Test Split (To evaluate the model properly)